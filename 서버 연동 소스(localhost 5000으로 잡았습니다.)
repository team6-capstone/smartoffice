const express = require('express');
const bodyParser=require('body-parser');
const app=express();
const router = express();
const port=8001;

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:true}));

app.use(express.static(__dirname+'/client/build'));

app.get('/', function(req, res){
   res.sendFile(__dirname+'/client/build/index.html');
});

var user="";
var user1="";
var user2="";
var user2email="";
var seatid="";
var date="";
var starttime="";
var endtime="";
var userlid="";
const mysql=require('mysql');
const { query } = require('express');


const connection=mysql.createConnection({
   host: "sjuteam6.cafe24.com",
   user: "sjuteam6",
   password:"sejongteam6",
   port : "3306",
   database : "sjuteam6"
});
connection.connect();



app.get('/hello', (req, res)=> {
  connection.query(
    "SELECT * FROM user",
    (err, rows, fields) => {
       res.send(rows);
    }
  );
});

app.get('/api', (req, res)=>{
  connection.query(
    "SELECT * FROM seat",
    (err, rows, fields) =>{
      res.send(rows);
    }
);
});


app.post('/hello', (req, res)=>{
 
  let name=req.body.name;
  let id=req.body.id;
  let pw=req.body.pw;
  let email=req.body.email;
  let department=req.body.department;
  let rank=req.body.rank;
  let phone=req.body.phone;
  let state=req.body.state;
  let params = [id, department, rank, name, phone, email, state, pw];
  connection.query(
    "INSERT INTO user VALUES (?, ?, ?, ?, ?, ?, ?, ?)", 
    params,
    (err, rows, fields) =>{
      res.send(rows);
      console.log(err);
    });
});

app.delete('/hello/:id', (req, res) => {
  
  let params=[req.params.id];
  connection.query("DELETE FROM user WHERE id = (?)", params,
     (err, rows, fields) => {
       res.send(rows);
       console.log(err);
     }
  )
    });


app.post('/hello2', (req, res)=>{
  const user_id=req.body.SenduserID;
  const user_pw=req.body.SenduserPW;
  let params=[user_id, user_pw];
  connection.query("SELECT * FROM user WHERE id=(?) AND pw=(?)", 
  params,
  (err, rows, result) =>{
    if(err){
      res.send({ err:err});
    }
    if(rows.length>0){
      res.send(result);
      userlid=user_id;
    }else{
      
      res.send({message:"로그인 실패"});
    }
  }
  );
});


app.post('/hello3', (req, res)=>{
   user=req.body.SendID;
   res.send(user);
   
});

app.get('/hello3', (req, res)=>{
   connection.query("SELECT * FROM user WHERE id=(?)",
   user, (err, rows, result)=>{
     res.send(rows);
     console.log(user);
   });
});

app.post('/hello8', (req,res)=>{
  seatid=req.body.seat_id;
  date=req.body.date;
  starttime=req.body.start_time;
  endtime=req.body.end_time;
  res.send(seatid);
 })

app.get('/hello8', (req,res)=>{
  let params=[date, seatid];
  connection.query(
  "SELECT * FROM seat_log WHERE date=(?) AND seat_id=(?) AND return = 2",
  params, (err, rows, result)=>{
    if(rows.length>0){
      res.send({message:"해당 좌석은 예약되었습니다."});
      console.log(err);
    }
    else{
      res.send(result);
      console.log(err);
    }
  }
)
})
app.post('/hello4', (req, res)=>{
  let seatid=req.body.seat_id;
  let date=req.body.date;
  let starttime=req.body.start_time;
  let endtime=req.body.end_time;
  let params=[seatid, userlid, date, starttime, endtime];
  connection.query(
    "INSERT INTO seat_log VALUES (null, ?, ?, ?, ?, ?, 2)", params,
    (err, rows, fields) =>{
      res.send(rows);
      console.log(err);
    }
)
})



app.get('/hello4', (req, res)=>{
  connection.query("SELECT * FROM seat_log WHERE user = (?)", user, (err, rows, fields)=>{
    res.send(rows);
  });
});

app.delete('/hello4/:id', (req, res) => {
  
  let params=[req.params.id];
  connection.query("DELETE FROM seat_log WHERE id = (?)", params,
     (err, rows, fields) => {
       res.send(rows);
       console.log(err);
     }
  )
    });


    app.post('/hello5', (req, res)=>{
      const manager_id=req.body.SendManagerID;
      const manager_pw=req.body.SendManagerPW;
      let params=[manager_id, manager_pw];
      connection.query("SELECT * FROM manager WHERE id=(?) AND pw=(?)", 
      params,
      (err, rows, result) =>{
        
        if(err){
          res.send({ err:err});
        }
        if(rows.length>0){
          res.send(result);
        }else{
          
          res.send({message:"로그인 실패"});
        }
      }
      );
    });
  
    app.post('/hello6', (req, res)=>{
     user1=req.body.uname;
      res.send(user1);
    });

    app.get('/hello6', (req, res)=>{
      connection.query(
        "SELECT * FROM seat_log WHERE user=(?)", user1,
        (err, rows, fields) =>{
          res.send(rows);
        }
    );
    });

    app.post('/hello7', (req, res)=>{
      user2=req.body.Senduid;
      user2email=req.body.SendEmail;
      res.send(user2);
    });

    app.get('/hello7', (req, res)=>{
      let params=[user2, user2email]
      connection.query("SELECT * FROM user WHERE id=(?) AND email=(?)",
      params, (err, rows, result)=>{
        res.send(rows);
      });
   });

   app.get('/hello10', (req, res)=> {
    connection.query(
      "SELECT * FROM seat",
      (err, rows, fields) => {
         res.send(rows);
      }
    );
  });

  app.post('/hello9', (req,res)=>{
    let floor=req.body.floor;
    let seatlid=req.body.seatlid;
    let statuslid=req.body.statuslid;
    let params=[statuslid, floor, seatlid];
    connection.query("UPDATE seat SET statement=? WHERE floor=? AND id=?", 
    params, (err, rows, result)=>{
      res.send(rows);
    })

  })

  app.get('/hello11', (req, res)=>{
    connection.query(
      "SELECT * FROM user",
      (err, rows, fields)=>{
        res.send(rows);
      }
    )
  })
  app.post('/hello12', (req,res)=>{
    let uid=req.body.uid;
    let upw=req.body.upw;
    let udepart=req.body.udepart;
    let uemail=req.body.uemail;
    let uphone=req.body.uphone;
    let urank=req.body.urank;
    let params=[upw, udepart, urank, uemail, uphone, uid];
    connection.query("UPDATE user SET pw= ?, department= ?, rank= ?, email= ?, phone= ? WHERE id= ?", 
    params, (err, rows, result)=>{
      res.send(rows);
    })

  })  

  app.get('/hello13', (req, res)=>{
    connection.query(
      "SELECT * FROM user WHERE id= ?", 
      userlid,
      (err, rows, fields)=>{
        res.send(rows);
      }
    )
  })

  app.post('/hello14', (req,res)=>{
    let upw=req.body.upw;
    let uemail=req.body.uemail;
    let uphone=req.body.uphone;
    let params=[upw, uemail, uphone, userlid];
    connection.query("UPDATE user SET pw= ?, email= ?, phone= ? WHERE id= ?", 
    params, (err, rows, result)=>{
      res.send(rows);
    })

  })  
app.listen(port, () => console.log(`Listen on port ${port}`));
